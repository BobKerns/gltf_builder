---
    config:
        layout: elk
    title: glTF 2.0 ER Diagram (User Subset)
    description: |
        This is a subset of the glTF 2.0 ER diagram, focusing on the user-facing elements.
        It includes only the essential components that users typically interact with,
        omitting internal details and less commonly used features.
---
erDiagram
    direction TB
    Builder ||..o{ BNode : nodes
    Builder ||--|| BAsset : asset
    Builder ||--o{ BScene : scenes
    Builder ||--|| BScene : scene
    Builder ||--o{ BImage : images
    Builder ||--o{ BCamera : cameras
    Builder ||--o{ BTexture : textures
    Builder ||--o{ BSampler : samplers
    Builder ||--o{ BMaterial : materials
    Builder ||--o{ BMesh : meshes
    Builder ||--o{ BAnimation : animations
    Builder ||--o{ BAnimationChannel : animationChannels
    Builder ||--o{ BAnimationSampler : animationSamplers
    Builder ||--o{ BSkin : skins
    BAnimation ||..|{ BAnimationChannel : animationChannels
    BAnimation ||..|{ BAnimationSampler : animationSamplers
    BAnimationChannel ||..o| BAnimationSampler : sampler
    BNode ||..o| BCamera : camera
    BImage {
        Optional[str] name           "Name of the image"
        Optional[str] uri           "URI or path to the image"
        string mimeType      "MIME type of the image (e.g., image/png)"
        dict extensions
        dict extras
    }
    Builder {
        list extensionsUsed        "List of used glTF extensions"
        list extensionsRequired    "List of required glTF extensions"
        dict extensions
        dict extras
    }
    BScene ||..|{ BNode : nodes
    BNode ||--o{ BNode : children
    BNode ||..o| BMesh : mesh
    BMesh ||--|{ BPrimitive : primitives
    Builder ||--o{ BImage : images
    Builder ||--o{ BTexture : textures
    BPrimitive ||..o| BMaterial : material
    BPrimitive {
        PrimitiveMode mode "Required, type of operation"
        Point POSITION     "Required"
        Vector3 NORMAL
        Tangent TANGENT
        Color COLOR_n      "n starting at 0"
        UvPoint TEXCOORD_n "n starting at 0"
        Joint JOINTS_n     "n starting at 0, skinned mesh attributes"
        Weight WEIGHTS_n   "n starting at 0, skinned mesh attributes"
        dict extensions
        dict extras
    }
    BAsset {
        string generator      "Name of the tool that generated the asset"
        string version        "The version of the generator"
        string copyright      "Copyright information"
        string minVersion     "Minimum glTF version required"
        string license        "License information"
        dict extensions
        dict extras
    }
    BTexture {
        Optional[str] name           "Name of the texture"
        dict extensions
        dict extras
    }
    Builder ||--o{ BSampler : samplers
    BSampler {
        Optional[str] name           "Name of the sampler"
        MagFilter magFilter         "Magnification filter"
        MinFilter minFilter         "Minification filter"
        WrapMode wrapS             "Wrapping mode for S coordinate"
        WrapMode wrapT             "Wrapping mode for T coordinate"
        dict extensions
        dict extras
    }
    BNode {
        Optional[str] name           "Name of the node"
        bool root "Indicates no parent"
        Optional[Vector3] translation "Translation vector"
        Optional[Quaternion] rotation "Rotation quaternion"
        Optional[Vector3] scale "Scale vector"
        Optional[Matrix4] matrix "Matrix. If present, the TRS must not be present"
        dict extensions
        dict extras
    }
    BMesh {
        Optional[str] name    "Name of the mesh"
        list weights          "List of weights for morph targets"
        dict extensions
        dict extras
    }
    BMaterial {
        Optional[str] name           "Name of the material"
        Vector4 baseColorFactor "Applies to baseColorTexture"
        float metallicFactor "How metallic the material is"
        float roughnessFactor "Applies to metallicRoughnessTexture"
        Vector3 emissiveFactor "Applies to emissiveTexture"
        Vector4 baseColorFactor
        AlphaMode alphaMode       "Alpha mode for the material"
        float alphaCutoff     "Alpha cutoff value for alpha mode"
        bool doubleSided      "Indicates if the material is double-sided"
        float normalScale     "Applies to normalTexture"
        float occlusionStrength "Applies to occlusionTexture"
        dict extras
    }
    BMaterial ||..o| BTexture : emissiveTexture
    BMaterial ||..o| BTexture : normalTexture
    BMaterial ||..o| BTexture : baseColorTexture
    BMaterial ||..o| BTexture : metallicRoughnessTexture
    BMaterial ||..o| BTexture : occlusionTexture
    BScene {
        Optional[str] name           "Name of the scene"
        dict extensions
        dict extras
    }
    BCamera {
        Optional[str] name           "Name of the camera"
        CameraType type "Type of the camera (e.g., PERSPECTIVE)"
        float zfar "Far clipping plane"
        float znear "Near clipping plane"
        float xmag       "Horizontal field of view (orthographic)"
        float ymag      "Vertical field of view (orthographic)"
        float aspectRatio "Aspect ratio (perspective)"
        float yfov         "Vertical field of view (perspective)"
        dict extensions
        dict extras
    }
    BTexture ||..o| BImage : source
    BTexture ||--o| BSampler : sampler
    BSkin {
        Optional[str] name           "Name of the skin"
        list[Matrix4] inverseBindMatrices "List of inverse bind matrices"
        dict extensions
        dict extras
    }
    BSkin ||..|| BNode : skeleton
    BSkin ||..o| BNode : joints
    BPrimitive ||--|{ BMaterial : material

BAnimationSampler {
    int input "Accessor for the input values"
    int output "Accessor for the output values"
    Interpolation interpolation "Interpolation method for the sampler"
    dict extensions
    dict extras
}
BAnimationChannel {
    dict extensions
    dict extras
}
BAnimationChannel ||..|| BAnimationChannelTarget : target
BAnimationChannelTarget {
    string path "Path to target property"
    dict extensions
    dict extras
}
BAnimationChannelTarget ||..|| BNode : node
BAnimation {
    Optional[str] name           "Name of the animation"
    dict extensions
    dict extras
}
