#!/usr/bin/env python3
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "click",
#     "tomlkit",
# ]
# ///

from pathlib import Path
import subprocess
from typing import cast

import click
from semver import Version
import tomlkit
import tomlkit.container
from tomlkit.toml_file import TOMLFile

ROOT = Path(__file__).parent.parent
DOCS = ROOT / 'docs'
SRC = ROOT / 'src'

BACKGKROUND_COLOR = 'ffeecc'
DIAGRAMS: list[tuple[Path, *tuple[str,...]]] = [
        (DOCS / 'compiler_classes.mmd', '-t', 'default', '--backgroundColor', BACKGKROUND_COLOR, '-s', '1'),
        (DOCS / 'erDiagram.mmd', '-t', 'default', '--backgroundColor', BACKGKROUND_COLOR, '-s', '1'),
        (DOCS / 'erDiagramUserSubset.mmd', '-t', 'default', '--backgroundColor', BACKGKROUND_COLOR, '-s', '1'),
        (DOCS / 'erDiagramGeometry.mmd', '-t', 'default', '--backgroundColor', BACKGKROUND_COLOR, '-s', '1'),
]

def update_diagram(diagram: Path|str, *params: str) -> None:
    "Update the given diagram."

    infile = SRC / diagram
    outfile = infile.with_suffix('.svg')
    if not infile.exists():
        raise FileNotFoundError(f"Diagram {diagram} not found.")
    cmd = [
        str(arg)
        for arg in ('npx', 'mmdc', '-i', infile, '-o', outfile, *params)
    ]
    print(f"Updating {diagram}...")
    print(f"Running command: {' '.join(cmd)}")
    result = subprocess.run(cmd, cwd=str(ROOT))
    if result.returncode != 0:
        raise RuntimeError(f"Failed to update {diagram}.")

def update_diagrams() -> None:
    "Update all diagrams."

    for diagram, *params in DIAGRAMS:
        update_diagram(diagram, *params)

def update_version() -> None:
    "Update the version in the pyproject.toml file."

    pyproject = ROOT / 'pyproject.toml'
    if not pyproject.exists():
        raise FileNotFoundError("pyproject.toml not found.")
    file = TOMLFile(pyproject)
    toml = file.read()
    project = cast(tomlkit.container.Container, toml['project'])
    version = Version.parse(str(project['version']))
    version = version.bump_patch()
    project['version'] = str(version)
    print(f"Updating version to {version}...")
    file.write(toml)

def browse_docs() -> None:
    "Open the documentation in a browser."
    cmd = ('npm', 'run', 'browse')
    subprocess.run(cmd, cwd=str(ROOT))

def lock_dependencies() -> None:
    "Update the requirements.txt and uv.lock files."
    cmd = ('uv', 'sync')
    cmd = ('uv', 'pip', 'compile', 'pyproject.toml', "-o", 'requirements.txt')
    subprocess.run(cmd, cwd=str(ROOT))

@click.command()
@click.option('--all', is_flag=True, help="Update all files.")
@click.option('--diagrams', is_flag=True, help="Update all diagrams.")
@click.option('--release', is_flag=True, help="Increment the release version.")
@click.option('--browse', is_flag=True, help="View the documentation in a browser.")
@click.option('--lock', is_flag=True, help="Update the dependency lockiles.")
def main(all: bool,
         diagrams: bool,
         release: bool,
         browse: bool,
         lock: bool,
        ) -> None:
    "Update and generate documentation and other files."
    if diagrams or all:
        update_diagrams()
    if browse or all:
        browse_docs()
    if lock or all:
        lock_dependencies()

    if release:
        update_version()


if __name__ == "__main__":
    main()
