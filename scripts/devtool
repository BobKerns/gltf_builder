#!/usr/bin/env python3
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "click",
#     "tomlkit",
# ]
# ///
# The above comment is managed by uv, do not edit it manually.
# It enables uv to manage the dependencies and the Python version.
# See PEP 723 for more information.
# https://peps.python.org/pep-0723/

from contextlib import suppress
from pathlib import Path
import subprocess
from typing import Any, NamedTuple, cast
import psutil
import socket
import sys

import click
from semver import Version
import tomlkit
import tomlkit.container
from tomlkit.toml_file import TOMLFile
import webbrowser


ROOT = Path(__file__).parent.parent
DOCS = ROOT / 'docs'
IMGS = DOCS / 'img'
SRC = ROOT / 'src'
NODE_BIN = ROOT / 'node_modules/.bin'
MARKSERV = NODE_BIN / 'markserv'

debug_on: bool = False
verbose_on: bool = False

def run(*cmds: Any, **kwargs) -> subprocess.CompletedProcess:
    "Run the given command."
    cmd = [str(arg) for arg in cmds]
    if debug_on:
        print(f"Running command: {' '.join(cmd)}")
    result: subprocess.CompletedProcess = subprocess.run(cmd,
                                                         cwd=str(ROOT),
                                                         **kwargs
                                                         )
    if result.returncode != 0:
        raise RuntimeError(f"Command exited with return code {result.returncode}.")
    if debug_on:
        print("Command completed successfully.")
    return result

def spawn(*cmds: Any, **kwargs) -> subprocess.Popen:
    "Spawn the given command."
    cmd = [str(arg) for arg in cmds]
    if debug_on:
       print(f"Running command: {' '.join(cmd)}")
    proc = subprocess.Popen(cmd, **kwargs, cwd=str(ROOT))
    # In the expected case, the process will not have terminated,
    # and the return code will be None. If the process has already terminated,
    # (whether with "success" or otherwise) we raise an error.
    if proc.returncode is not None:
        raise RuntimeError(f"Command exited prematurely with return code {proc.returncode}.")
    if debug_on:
        print("Command started successfully.")
    return proc


@click.group()
@click.option('--debug', is_flag=True, help="Enable debug mode.")
@click.option('--verbose', is_flag=True, help="Enable verbose mode.")
def main(debug: bool=False, verbose: bool=False) -> None:
    """
    Update and generate documentation and other files, and perform
    other project-specific tasks.

    Supply the --help option for more information on a specific command.
    """
    global debug_on, verbose_on
    verbose_on = verbose
    debug_on = verbose_on = debug

@main.group(name='server')
def server() -> None:
    """
    <CMD> Operations on the local documentation server.
    Use the --help option for more information on a specific command.
    """
    pass

@main.group(name='update')
def update() -> None:
    """
    <CMD> Operations that update the project.
    Use the --help option for more information on a specific command.
    """
    pass

@update.group('all')
def update_all() -> None:
    """
    <CMD> Operations that update an entire set of files.
    Use the --help option for more information on a specific command.

    Example:
      devtool update all diagrams
    """
    pass

@update_all.command(name='release')
def run_all():
    "Run all commands in preparation for release."
    update_diagrams()
    sync_dependencies()
    update_version()


def check_pid(pid: int|None):
    """
    Check if a process with the given PID is running using psutil.
    Args:
        pid (int|None): The process ID to check.
    Returns:
        bool: True if the process is running, False otherwise.
    """
    if pid is None or pid <= 0:
        return False
    with suppress(Exception):
        return psutil.pid_exists(pid)
    return False


BACKGROUND_COLOR = 'fdf2e4'
DIAGRAMS: list[tuple[Path, *tuple[str,...]]] = [
        (IMGS / 'compiler_classes.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
        (IMGS / 'input_classes.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
        (IMGS / 'erDiagram.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
        (IMGS / 'erDiagramUserSubset.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
        (IMGS / 'erDiagramGeometry.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
]

@update.command(name='diagram')
@click.argument('diagram', type=click.Path(exists=True))
@click.option('--png', is_flag=True, help="Generate a PNG file instead of an SVG file.")
def update_diagram(diagram: Path|str, *params: str,
                   png: bool=False) -> None:
    "<PATH> Update the given diagram."

    fmt = '.svg'
    if png:
        fmt = '.png'
    if not params:
        diagram_spec = next((d for d in DIAGRAMS if d[0] == diagram), None)
        if diagram_spec is None:
            print(f"Diagram {diagram} not found in the list of diagrams, using defaults", file=sys.stderr)
            params = ('-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1')
        else:
            params = diagram_spec[1:]

    infile = ROOT / diagram
    outfile = infile.with_suffix(fmt)
    if not infile.exists():
        raise FileNotFoundError(f"Diagram {diagram} not found.")
    if verbose_on:
        print(f"Updating {diagram}...")
    try:
        run('npx', 'mmdc', '-i', infile, '-o', outfile, *params)
    except Exception as e:
        raise RuntimeError(f"Failed to update {diagram}.") from e


@update_all.command(name='diagrams')
def update_diagrams() -> None:
    "Update all diagrams."

    excs = []
    for diagram, *params in DIAGRAMS:
        try:
            update_diagram(diagram, *params)
        except Exception as e:
            excs.append(e)
    if excs:
        raise ExceptionGroup("Failed to update some diagrams", excs)

@update.command(name='version')
def update_version() -> None:
    "Update the version in the pyproject.toml file."

    pyproject = ROOT / 'pyproject.toml'
    if not pyproject.exists():
        raise FileNotFoundError("pyproject.toml not found.")
    file = TOMLFile(pyproject)
    toml = file.read()
    project = cast(tomlkit.container.Container, toml['project'])
    version = Version.parse(str(project['version']))
    version = version.bump_patch()
    project['version'] = str(version)
    print(f"Updating version to {version}...")
    file.write(toml)


PORT_FILE = ROOT / '.browse.html.port'
RELOAD_FILE = ROOT / '.browse.reload.port'
PID_FILE = ROOT / '.browse.pid'
LOG_FILE = ROOT / '.browse.log'


def find_free_port():
    """Finds an available port on the system.

    Returns:
        int: An available port number.
    """
    sock = socket.socket()
    # We are binding on all interfaces, to find a port that is completely free.
    # We do not communicate with the socket, and immediately discard it, and
    # we never listen on it, so we do not need to worry about it being an exposed
    # interface.
    #
    # We also want to avoid creating a situation where we get a port that is in
    # the process of being opened by another process, but not yet bound. We are
    # not in charge of the eventual binding and listen; we cannot just bind to
    # one interface. We would have to predict and enumerate the interfaces that the
    # server will bind to, and then bind to all of them, which is not reliably
    # possible.
    #
    # Race conditions here are unavoidable, but this should be a good enough
    # approximation. We pass the port off to the server, which will then bind to it
    # with localhost, so it will be bound to the correct interface, and we can't do
    # anything about the race condition. The user can retry if they get an error.
    sock.bind(('', 0))  # Bind to all interfaces on a random available port
    port = sock.getsockname()[1]
    sock.close()
    return port

def check_port(port: int|None):
    """Check if a port is in use on the system.

    Args:
        port (int): The port number to check.

    Returns:
        bool: True if the port is in use (a connection can be established), False otherwise.
    """
    if port is None or port <= 0:
        return False
    def try_AF(af: int):
        with suppress(Exception):
            sock = socket.socket(af, socket.SOCK_STREAM)
            sock.settimeout(1)  # Set a timeout value (in seconds)
            sock.connect(("localhost", port))
            sock.close()
            return True
        return False
    return try_AF(socket.AF_INET6) or try_AF(socket.AF_INET)


def read_id_file(file: Path|str) -> int | None:
    "Read the id from the given file."
    file = ROOT / file
    with suppress(Exception):
        if not file.exists():
            return None
        with file.open('r') as f:
            return int(f.read().strip())
    return None

def save_id_file(file: Path|str, value: int|None) -> None:
    "Save the id to the given file."
    file = ROOT / file
    if value is None or value <= 0:
        value = 0
    with file.open('w') as f:
        f.write(str(value))

class ServerStatus(NamedTuple):
    """
    A named tuple representing the status of the server.
    The first value is a boolean indicating if the server is running.
    The second value is a tuple containing the pid, html port, and reload port.
    The pid will be None if the server is not running.
    The html port and reload port will be None if they are not set, otherwise
    they will be the port numbers of the last run. This means we will try to
    reuse the same ports if the server is restarted.
    """
    pid: int | None
    "Will be None if the server is not running."
    html_port: int | None
    "Will be None if the server has not been started."
    reload_port: int | None
    "Will be None if the server has not been started."


def get_server_status() -> ServerStatus:
    '''
    Check the status of the server. Cleans up dead servers and pid/port files
    if they are found, and returns the status of the server.

    Returns:
        ServerStatus: A named tuple containing the status of the server.
    '''
    html_port = read_id_file(PORT_FILE)
    reload_port = read_id_file(RELOAD_FILE)
    pid = read_id_file(PID_FILE)
    html_port_ok = check_port(html_port)
    reload_port_ok = check_port(reload_port)
    pid_ok = check_pid(pid)
    if debug_on:
        print(f'{html_port=} {html_port_ok=}')
        print(f'{reload_port=} {reload_port_ok=}')
        print(f'{pid=} {pid_ok=}')
        print(f'{check_port(html_port)=} {check_port(reload_port)=} {check_pid(pid)=}')
    status = html_port_ok and reload_port_ok and pid_ok
    if not status:
        stop_server(pid)
        return ServerStatus(None, html_port, reload_port)
    return ServerStatus(pid, html_port, reload_port)


@server.command(name='status')
def server_status(silent: bool=False) -> None:
    "Check the status of the server."
    pid, html_port, reload_port = get_server_status()
    if not silent:
        if pid is not None:
            print(f"Server is running, {pid=}, {html_port=}, {reload_port=}")
            print(f"Server is running on http://localhost:{html_port}")
        else:
            print("Server is not running.")
            print(f'Last used ports: {html_port=} {reload_port=}')
    if pid is None:
        sys.exit(1)

def stop_server(pid: int|None) -> None:
    """
    Stop the server if it is running.

    Args:
        pid (int|None): The process ID of the server.
    """
    if pid is not None and check_pid(pid):
        with suppress(Exception):
            p = psutil.Process(pid)
            p.terminate()
        # If the server is not running, we clear the pid file. We leave it in place because
        # it is the key for the VSCode Explorer's collapsing related files together, so it
        # declutters the explorer view. We keep the port files in place so that we can
        # reuse the ports if the server is restarted, allowing stale browser tabs to reconnect.
        save_id_file(PID_FILE, 0)


@server.command(name='stop')
def stop_server_command() -> None:
    "Stop the server if it is running."
    pid = read_id_file(PID_FILE)
    stop_server(pid)
    print("Server killed.")


def start_server() -> ServerStatus:
    """
    Start the server if it is not running.

    Returns:
        ServerStatus: A named tuple containing the status of the server.
    """
    (pid, html_port, reload_port) = get_server_status()
    if pid is not None:
        if debug_on:
            print("Server is already running.")
        return ServerStatus(pid, html_port, reload_port)
    if not html_port:
        html_port = find_free_port()
    if not reload_port:
        reload_port = find_free_port()
    save_id_file(PORT_FILE, html_port)
    save_id_file(RELOAD_FILE, reload_port)
    if debug_on:
        print(f"Starting server on port {html_port} with reload port {reload_port}.")
        silent_flag = ()
        output_flags = {'stderr': subprocess.PIPE}
    else:
        silent_flag = ('--silent',)
        # Open a stream to the log file. We don't close it as we pass ownership to the spawned
        # process. We don't want to close it, as the process will be writing to it.
        logstream = open(LOG_FILE, 'w')

        output_flags = {'stdout': logstream, 'stderr': logstream}
    proc: subprocess.Popen = spawn(MARKSERV,
        '-p', str(html_port),
        '-b', str(reload_port),
        '--browser', 'false',
        *silent_flag,
        'README.md',
        **output_flags
        )
    if proc.returncode:
        error_message = proc.stderr.read().decode() if proc.stderr else "Unknown error"
        print(f"Failed to start the server: {error_message}", file=sys.stderr)
        sys.exit(proc.returncode)
    pid = proc.pid
    if not pid:
        print("Failed to get the process ID.", file=sys.stderr)
        save_id_file(PID_FILE, 0)
        return ServerStatus(None, html_port, reload_port)
    save_id_file(PID_FILE, pid)
    return ServerStatus(pid, html_port, reload_port)

@server.command(name='start')
def start_server_command() -> None:
    "Start the server if it is not running."
    pid, html_port, reload_port = get_server_status()
    if pid is not None:
        print(f"Server is running on http://localhost:{html_port}")
        sys.exit(0)
    status = start_server()
    if status.pid is not None:
        print(f"Server started on http://localhost:{status.html_port}")
    else:
        print("Failed to start the server.", file=sys.stderr)
        sys.exit(1)


@main.command(name='browse')
@click.argument('file', type=click.Path(exists=True), default=ROOT / 'README.md')
def browse_docs(file: Path = ROOT / 'README.md') -> None:
    "[<PATH>] Open the documentation in a browser."

    file = Path(file).resolve()
    if not file.exists():
        print(f"File {file} not found, browsing directory.", file=sys.stderr)
        file = file.parent

    if ROOT not in file.parents and file != ROOT:
        # Onn general security principles, we should not allow
        # browsing outside the project directory. It's not really a
        # security issue here.
        print(f"File {file} is not in the project directory.", file=sys.stderr)
        sys.exit(1)

    file = file.relative_to(ROOT)

    if not MARKSERV.exists():
        print(f"Markserv not found at {MARKSERV}. Please run 'build setup' first.", file=sys.stderr)
        sys.exit(1)

    (pid, html_port, reload_port) = get_server_status()
    if pid is None:
        (pid, html_port, reload_port) = start_server()
    if not pid:
        print("Failed to start the server.", file=sys.stderr)
        sys.exit(1)
    assert html_port is not None
    if verbose_on:
        print(f"Opening documentation in browser at http://localhost:{html_port}/{file}")
    webbrowser.open(f'http://localhost:{html_port}/{file}')


@main.command(name='sync')
def sync_dependencies() -> None:
    "Update the requirements.txt and uv.lock files."
    run('uv', 'sync')
    run('uv', 'pip', 'compile', 'pyproject.toml', "-o", 'requirements.txt')


@main.command(name='setup')
def setup() -> None:
    "Set up the project."

    run('npm', 'install')
    run('uv', 'sync')
    run('uv', 'pip', 'compile', 'pyproject.toml', "-o", 'requirements.txt')
    run('uv', 'pip', 'compile', 'pyproject.toml', "-o", 'requirements-dev.txt')
    update_diagrams()


if __name__ == "__main__":
    main()
